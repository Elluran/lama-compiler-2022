-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case stmt of
      Assn (s, expr) -> [c[0] <- [s, evalExpr(c[0], expr)], c[1]]
    | Seq (x, y) -> eval(eval(c, x), y)
    | Skip -> c
    | Read (s) -> 
        var k = readWorld(c[1]);
        [c[0] <- [s, k[0]], k[1]]
    | Write (expr) -> [c[0], writeWorld(evalExpr(c[0], expr), c[1])]
    | While (expr, stmt) -> 
        while evalExpr(c[0], expr) do
          c:=eval(c, stmt)
        od;
        c
    | DoWhile (stmt, expr) -> 
        do
        c := eval(c, stmt)
        while evalExpr(c[0], expr) od;
        c
    | If (expr, stmt1, stmt2) ->
        if evalExpr(c[0], expr) then
          eval(c, stmt1)
        else
          eval(c, stmt2)
        fi
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
