-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  x=lident                                          {fun (a) {
                                                                                       case a of
                                                                                         Ref  -> Ref (x)
                                                                                       | Void -> Ignore (Var (x))
                                                                                       | _    -> Var (x)
                                                                                       esac
                                                                                    }} |
                                  $(failure ("the rest of primary parsing in not implemented\n"))),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});


-- var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
--                                  x=lident  {Var (x)} |
--                                  x=inbr[s("("), exp, s(")")] {x}
--                                 ),
--       ops1 = memo $ eta syntax (s["*"] | s["/"] | s["%"]),
--       ops2 = memo $ eta syntax (s["+"] | s["-"] ),
--       ops3 = memo $ eta syntax (s["<"] | s["<="] | s[">"] | s[">="] | s["!="] | s["=="]),
--       ops4 = memo $ eta syntax (s["&&"]),
--       ops5 = memo $ eta syntax (s["!!"]),

--       exp = memo $ expr ({[Left, {[ops5, fun(l, op, r) {Binop(op, l, r)}]}],
--                           [Left, {[ops4, fun(l, op, r) {Binop(op, l, r)}]}],
--                           [Nona, {[ops3, fun(l, op, r) {Binop(op, l, r)}]}],
--                           [Left, {[ops2, fun(l, op, r) {Binop(op, l, r)}]}],
--                           [Left, {[ops1, fun(l, op, r) {Binop(op, l, r)}]}]
--                         },
--                          primary
--                         );

-- var stmtSeq = memo $ eta syntax (
--   x=stmt s[";"] y=stmtSeq  {Seq (x, y)} |
--   stmt
-- );

-- var ifExpr = memo $ eta syntax (
--   kIf x=exp kThen y=stmtSeq kFi {If (x, y, Skip)}             |
--   kIf x=exp kThen y=stmtSeq z=condElsePart kFi {If (x, y, z)}
-- ), 
--  condElsePart = memo $ eta syntax (
--   kElif x=exp kThen y=stmtSeq {If (x, y, Skip)}             |
--   kElif x=exp kThen y=stmtSeq z=condElsePart {If (x, y, z)} |
--   kElse x=stmtSeq {x}
--  );

-- var forLoop = memo $ eta syntax (
--     kFor w=stmtSeq s[","] x=exp s[","] y=stmtSeq kDo z=stmtSeq kOd {Seq(w, While(x, Seq(z, y)))} 
-- );

-- var stmt = memo $ eta syntax (kWrite x=inbr[s("("), exp, s(")")]    {Write (x)}       |
--                               kRead  x=inbr[s("("), lident, s(")")] {Read (x)}        |
--                               x=lident s[":="] y=exp                {Assn (x, y)}     |
--                               kWhile x=exp kDo y=stmtSeq kOd        {While (x, y)}    |
--                               kDo x=stmtSeq kWhile y=exp kOd        {DoWhile (x, y)}  |
--                               x=stmt s[";"] y=stmt end              {Seq (x, y)}      |
--                               kSkip                                 {Skip}            |
--                               ifExpr                                                  |
--                               forLoop
--                              );

-- -- Public top-level parser
-- public parse = stmt;
