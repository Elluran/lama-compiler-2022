-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}


fun addDefinitions (state, defs) {
    case defs of 
        Var (names) : tl -> addDefinitions(addNames(state, names), tl)
      | Fun (name, args, body) : tl -> addDefinitions(addFunction(state, name, args, body), tl)
      | {} -> state
    esac 
}                       


fun bindNamesAndValues (st, names, vals) {
  case names of
      name : names -> bindNamesAndValues (st <- [name, vals.hd], names, vals.tl) 
    | {} -> st
  esac 
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}


fun eval (c@[st, w], expr) {
  case expr of
      Assn (exp1, exp2) -> 
        case evalList (c, {exp1, exp2}) of 
          [[st, w], {ref, v}] -> [[st <- [ref, v], w], v]
        esac
    | Seq (x, y) -> 
        case evalList (c, {x, y}) of 
          [c, {_ , v}] -> [c, v]
        esac
    | Read (s) -> 
        case readWorld(w) of 
          [k1, k2] -> [[st <- [s, k1], k2], 0]
        esac
    | Write (exp) -> 
        case eval(c, exp) of
          [[st2, w2], v] -> [[st2, writeWorld(v, w2)], 0]
        esac
    | If (expr, stmt1, stmt2) ->
        if eval(c, expr)[1] then eval(c, stmt1) else eval(c, stmt2) fi
    | Binop (s, exp1, exp2) -> 
        case evalList (c, {exp1, exp2}) of 
          [c, {v1, v2}] -> [c, evalOp(s, v1, v2)]
        esac
    | Ref     (s)         -> [c, s]
    | Ignore  (exp)       -> [eval(c, exp)[0], 0]
    | Skip                -> [c, 0]
    | Var (s)             -> [c, lookup(st, s)]
    | Const (i)           -> [c, i]
    | While (cond, body)  -> 
        while eval(c, cond)[1] do
          c := eval(c, body)[0]
        od;
        [c, 0]
    | DoWhile (exp, cond) -> 
        do
          c := eval(c, exp)[0]
        while eval(c, cond)[1] od;
        [c, None]
    | Scope (ds, exp) ->
        case enterScope(st) of 
          st -> case addDefinitions(st, ds) of 
            st -> case eval([st, w], exp) of
                      [[st, w], v] -> [[leaveScope(st), w], v]
                  esac 
                esac
        esac
    | Call (name, args) ->
        -- I decided to make this piece huge, but more understandable
        case evalList(c, args) of
          [[st, w], vals] -> 
          case enterFunction(st) of 
            fst -> 
              case lookup(fst, name) of 
                Fun (args, body) -> 
                  case addNames(fst, args) of 
                    fst -> 
                      case bindNamesAndValues(fst, args, vals) of 
                        fst -> 
                          case eval ([fst, w], body) of
                            [[fst, w], v] -> 
                              [[leaveFunction(st, getGlobal(fst)), w], v]
                          esac
                      esac 
                  esac
              esac
          esac
        esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
