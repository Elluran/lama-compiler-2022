-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
      Assn (exp1, exp2) -> 
        case evalList (c, {exp1, exp2}) of 
          [[st, w], {ref, v}] -> [[st <- [ref, v], w], v]
        esac
    | Seq (x, y) -> 
        case evalList (c, {x, y}) of 
          [c, {_ , v}] -> [c, v]
        esac
    | Read (s) -> 
        case readWorld(w) of 
          [k1, k2] -> [[st <- [s, k1], k2], None]
        esac
    | Write (exp) -> 
        case eval(c, exp) of
          [[st2, w2], v] -> [[st2, writeWorld(v, w2)], None]
        esac
    | If (expr, stmt1, stmt2) ->
        if eval(c, expr)[1] then eval(c, stmt1) else eval(c, stmt2) fi
    | Binop (s, exp1, exp2) -> 
        case evalList (c, {exp1, exp2}) of 
          [c, {v1, v2}] -> [c, evalOp(s, v1, v2)]
        esac
    | Ref     (s)         -> [c, s]
    | Ignore  (exp)       -> [eval(c, exp)[0], None]
    | Skip                -> [c, None]
    | Var (s)             -> [c, st(s)]
    | Const (i)           -> [c, i]
    | While (cond, body)  -> 
        while eval(c, cond)[1] do
          c := eval(c, body)[0]
        od;
        [c, None]
    | DoWhile (exp, cond) -> 
        do
          c := eval(c, exp)[0]
        while eval(c, cond)[1] od;
        [c, None]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
