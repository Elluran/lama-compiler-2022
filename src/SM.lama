-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalBinOp (a, b, op) {
  case op of 
     "*"  -> a *  b
  |  "+"  -> a +  b 
  |  "-"  -> a -  b
  |  "/"  -> a /  b
  |  "%"  -> a %  b
  |  "<"  -> a <  b
  |  ">"  -> a >  b 
  |  "<=" -> a <= b
  |  ">=" -> a >= b
  |  "&&" -> a && b
  |  "!!" -> a !! b
  |  "==" -> a == b
  |  "!=" -> a != b
  esac
}

fun evalCmd ([stack, state, wrld], cmd) {
  case cmd of
    READ      -> case readWorld(wrld) of [n, w] -> [{n} +++ stack, state, w] esac
  | WRITE     -> [stack.tl, state, writeWorld(stack.hd, wrld)]
  | BINOP (s) -> [{evalBinOp(stack.tl.hd, stack.hd, s)} +++ stack.tl.tl, state, wrld]
  | LD    (x) -> [{state(x)} +++ stack, state, wrld]
  | ST    (x) -> [stack.tl, state <- [x, stack.hd], wrld]
  | CONST (n) -> [{n} +++ stack, state, wrld]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (evalCmd, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (s) -> {LD (s)}
    | Const (i) -> {CONST (i)}
    | Binop (s, exp1, exp2) -> (
      compileExpr(exp1) +++ compileExpr(exp2) +++ {BINOP (s)}
    )
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun build_cmd_list (stmt) {
    case stmt of
      Assn (s, expr) -> compileExpr(expr) +++ {ST (s)}
    | Seq (x, y) -> (
      build_cmd_list(x) +++ build_cmd_list(y)
    )
    | Skip -> {}
    | Read (s) -> READ : {ST (s)}
    | Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
  }

  build_cmd_list(stmt)
}
