-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration

fun eval (env, c, insns) {
  failure ("SM eval not implemented\n")
}

-- fun eval (c, insns) {
--   var stack = makeArray(200);
--   var top = -1;
--   var state = c[1];
--   fun run_cmd(cmd) {
--     case cmd of
--       READ      -> (
--         var k = readWorld(c[2]); 
--         c[2] := k[1];
--         top := top + 1;
--         stack[top] := k[0]
--       )
--     | WRITE     -> (
--       c[2] := writeWorld(stack[top], c[2])
--     )
--     | BINOP (s) -> (
--       var b = stack[top];
--       var a = stack[top - 1];
--       top := top - 1;
--       (
--         case s of 
--              "*" -> stack[top]  := a *  b
--           |  "+"  -> stack[top] := a +  b 
--           |  "-"  -> stack[top] := a -  b
--           |  "/"  -> stack[top] := a /  b
--           |  "%"  -> stack[top] := a %  b
--           |  "<"  -> stack[top] := a <  b
--           |  ">"  -> stack[top] := a >  b 
--           |  "<=" -> stack[top] := a <= b
--           |  ">=" -> stack[top] := a >= b
--           |  "&&" -> stack[top] := a && b
--           |  "!!" -> stack[top] := a !! b
--           |  "==" -> stack[top] := a == b
--           |  "!=" -> stack[top] := a != b
--         esac
--       )

--     )
--     | LD    (x) -> (
--       top := top + 1;
--       stack[top]:= state(x) 
--     )
--     | ST    (x) -> (
--       state := (state <- [x, stack[top]]);
--       top := top - 1
--     )
--     | CONST (n) -> (
--       top := top + 1;
--       stack[top] := n
--     )
--     esac
--   }
--   map (run_cmd, insns);
--   c[1] := state;
--   c
-- }

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- fun compileExpr (expr) {
--   case expr of
--       Var (s) -> {LD (s)}
--     | Const (i) -> {CONST (i)}
--     | Binop (s, exp1, exp2) -> (
--       compileExpr(exp1) +++ compileExpr(exp2) +++ {BINOP (s)}
--     )
--   esac
-- }


-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac

  -- fun build_cmd_list (stmt) {
  --   case stmt of
  --     Assn (s, expr) -> compileExpr(expr) +++ {ST (s)}
  --   | Seq (x, y) -> (
  --     build_cmd_list(x) +++ build_cmd_list(y)
  --   )
  --   | Skip -> {}
  --   | Read (s) -> READ : {ST (s)}
  --   | Write (expr) -> compileExpr(expr) +++ {WRITE}
  -- esac
  -- }

  -- build_cmd_list(stmt)
}
