-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  var stack = makeArray(200);
  var top = -1;
  var state = c[1];
  fun run_cmd(cmd) {
    case cmd of
      READ      -> (
        var k = readWorld(c[2]); 
        c[2] := k[1];
        top := top + 1;
        stack[top] := k[0]
      )
    | WRITE     -> (
      c[2] := writeWorld(stack[top], c[2])
    )
    | BINOP (s) -> (
      var b = stack[top];
      var a = stack[top - 1];
      top := top - 1;
      (
        case s of 
             "*" -> stack[top]  := a *  b
          |  "+"  -> stack[top] := a +  b 
          |  "-"  -> stack[top] := a -  b
          |  "/"  -> stack[top] := a /  b
          |  "%"  -> stack[top] := a %  b
          |  "<"  -> stack[top] := a <  b
          |  ">"  -> stack[top] := a >  b 
          |  "<=" -> stack[top] := a <= b
          |  ">=" -> stack[top] := a >= b
          |  "&&" -> stack[top] := a && b
          |  "!!" -> stack[top] := a !! b
          |  "==" -> stack[top] := a == b
          |  "!=" -> stack[top] := a != b
        esac
      )

    )
    | LD    (x) -> (
      top := top + 1;
      stack[top]:= state(x) 
    )
    | ST    (x) -> (
      state := (state <- [x, stack[top]]);
      top := top - 1
    )
    | CONST (n) -> (
      top := top + 1;
      stack[top] := n
    )
    esac
  }
  map (run_cmd, insns);
  c[1] := state;
  c
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (s) -> {LD (s)}
    | Const (i) -> {CONST (i)}
    | Binop (s, exp1, exp2) -> (
      compileExpr(exp1) +++ compileExpr(exp2) +++ {BINOP (s)}
    )
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun build_cmd_list (stmt) {
    case stmt of
      Assn (s, expr) -> compileExpr(expr) +++ {ST (s)}
    | Seq (x, y) -> (
      build_cmd_list(x) +++ build_cmd_list(y)
    )
    | Skip -> {}
    | Read (s) -> READ : {ST (s)}
    | Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
  }

  build_cmd_list(stmt)
}
