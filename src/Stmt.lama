-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  var state = c[0];
  case stmt of
      Assn (s, expr) -> (
        state := (state <- [s, evalExpr(state, expr)])
      )
    | Seq (x, y) -> eval(c, x); eval(c, y)
    | Skip -> skip
    | Read (s) -> (
        var k = readWorld(c[1]);
        c[1] := k[1];
        state := (state <- [s, k[0]])
      )
    | Write (expr) -> (
      var r;
      r := evalExpr(state, expr);
      c[1] := writeWorld(r, c[1])
    )
  esac;
  c[0] := state;
  c
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
